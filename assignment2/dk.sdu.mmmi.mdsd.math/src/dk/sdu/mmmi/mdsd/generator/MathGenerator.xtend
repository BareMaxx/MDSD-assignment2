/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.Exp
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.MyNumber
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Var
import dk.sdu.mmmi.mdsd.math.Let

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		
		// You can replace with hovering, see Bettini Chapter 8
		result.displayPanel
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(MathExp math) { 
		println("result" + math.exp.computeExp);
		println(variables);
		return variables
	}
	
	def static int computeExp(Exp exp) {
		println(exp.getClass())
		var test = 0 as int
		if (exp instanceof Plus) {
			return exp.left.computeExp+exp.right.computeExp
		} else if (exp instanceof Minus) {
			return exp.left.computeExp-exp.right.computeExp
		} else if (exp instanceof Mult) {
			println(exp.left.computeExp);
			return exp.left.computeExp*exp.right.computeExp
		} else if (exp instanceof Div) {
			return exp.left.computeExp/exp.right.computeExp
		} else if (exp instanceof Var) {
			println("var" + exp.name)
			variables.put(exp.name, exp.right.computeExp);
			test = exp.right.computeExp;
			println(test)
			return exp.right.computeExp
		} else if (exp instanceof Let) {
			println("LET")
			return exp.right.computeExp
		}
		
		if (exp instanceof MyNumber) {
			return exp.value;
		} else {
			return 0;
		}
	}
	
	def static int computePrim(Primary factor) { 
		87
	}

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
}
