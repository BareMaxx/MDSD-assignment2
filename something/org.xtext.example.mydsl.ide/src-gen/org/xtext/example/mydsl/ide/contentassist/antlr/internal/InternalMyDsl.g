/*
 * generated by Xtext 2.33.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleContainer
entryRuleContainer
:
{ before(grammarAccess.getContainerRule()); }
	 ruleContainer
{ after(grammarAccess.getContainerRule()); } 
	 EOF 
;

// Rule Container
ruleContainer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerAccess().getGroup()); }
		(rule__Container__Group__0)
		{ after(grammarAccess.getContainerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleABC
entryRuleABC
:
{ before(grammarAccess.getABCRule()); }
	 ruleABC
{ after(grammarAccess.getABCRule()); } 
	 EOF 
;

// Rule ABC
ruleABC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getABCAccess().getGroup()); }
		(rule__ABC__Group__0)
		{ after(grammarAccess.getABCAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getABCAccess().getGroup_0_0()); }
		(rule__ABC__Group_0_0__0)
		{ after(grammarAccess.getABCAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getABCAccess().getGroup_0_1()); }
		(rule__ABC__Group_0_1__0)
		{ after(grammarAccess.getABCAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__0__Impl
	rule__Container__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getContainerKeyword_0()); }
	'container'
	{ after(grammarAccess.getContainerAccess().getContainerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Container__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Container__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerAccess().getContainsAssignment_1()); }
	(rule__Container__ContainsAssignment_1)
	{ after(grammarAccess.getContainerAccess().getContainsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ABC__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group__0__Impl
	rule__ABC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getAlternatives_0()); }
	(rule__ABC__Alternatives_0)
	{ after(grammarAccess.getABCAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getNameAssignment_1()); }
	(rule__ABC__NameAssignment_1)
	{ after(grammarAccess.getABCAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ABC__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group_0_0__0__Impl
	rule__ABC__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getBCDAction_0_0_0()); }
	()
	{ after(grammarAccess.getABCAccess().getBCDAction_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getBCDKeyword_0_0_1()); }
	'BCD'
	{ after(grammarAccess.getABCAccess().getBCDKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ABC__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group_0_1__0__Impl
	rule__ABC__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getCDEAction_0_1_0()); }
	()
	{ after(grammarAccess.getABCAccess().getCDEAction_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ABC__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getABCAccess().getCDEKeyword_0_1_1()); }
	'CDE'
	{ after(grammarAccess.getABCAccess().getCDEKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Container__ContainsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerAccess().getContainsABCParserRuleCall_1_0()); }
		ruleABC
		{ after(grammarAccess.getContainerAccess().getContainsABCParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ABC__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getABCAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getABCAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
